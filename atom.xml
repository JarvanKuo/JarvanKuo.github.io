<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JK的技术博客</title>
  
  <subtitle>技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://JarvanKuo.github.io/"/>
  <updated>2019-09-18T11:05:26.000Z</updated>
  <id>https://JarvanKuo.github.io/</id>
  
  <author>
    <name>Jarvan Kuo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo笔记</title>
    <link href="https://JarvanKuo.github.io/2019/09/18/hexo%E7%AC%94%E8%AE%B0/"/>
    <id>https://JarvanKuo.github.io/2019/09/18/hexo笔记/</id>
    <published>2019-09-18T05:14:40.000Z</published>
    <updated>2019-09-18T11:05:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>hexo的一些配置和命令</p><a id="more"></a><h2 id="hexo-常用指令"><a href="#hexo-常用指令" class="headerlink" title="hexo 常用指令"></a>hexo 常用指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"post title with whitespace"</span> // 新增md文章</span><br><span class="line">hexo clean // 清除</span><br><span class="line">hexo g // 生成静态文件。</span><br><span class="line">hexo g -d // 文件生成后立即部署网站</span><br></pre></td></tr></table></figure><h2 id="站内文章跳转"><a href="#站内文章跳转" class="headerlink" title="站内文章跳转"></a>站内文章跳转</h2><p>通过内置的标签插件的语法post_link来实现引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</span><br></pre></td></tr></table></figure><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><p>请看 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官网</a></p><h2 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h2><p>使用流行的NexT，<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT官网</a></p><h2 id="默认主题"><a href="#默认主题" class="headerlink" title="默认主题"></a>默认主题</h2><p>插件扩展请看 <a href="https://hans2936.github.io/2017/10/22/PageLog/" target="_blank" rel="noopener">个人网站的功能插件</a></p><h2 id="评论插件-gitalk"><a href="#评论插件-gitalk" class="headerlink" title="评论插件-gitalk"></a>评论插件-gitalk</h2><p><a href="https://jinfagang.github.io/2018/10/07/%E7%BB%88%E4%BA%8E%EF%BC%81%EF%BC%81%EF%BC%81%E8%AE%B0%E5%BD%95%E5%A6%82%E4%BD%95%E5%9C%A8hexo-next%E4%B8%BB%E9%A2%98%E4%B8%8B%E9%85%8D%E7%BD%AEgitalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">记录如何在hexo next主题下配置gitalk评论系统</a></p><h2 id="修改内容区宽度"><a href="#修改内容区宽度" class="headerlink" title="修改内容区宽度"></a>修改内容区宽度</h2><p><a href="https://zuiyu1818.cn/posts/NexT_codewidth.html" target="_blank" rel="noopener">NexT | 修改内容区域的宽度</a></p><h2 id="添加文章阴影"><a href="#添加文章阴影" class="headerlink" title="添加文章阴影"></a>添加文章阴影</h2><p><a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93797964" target="_blank" rel="noopener">Hexo博客NexT主题下添加文章边框阴影效果</a></p><h2 id="文章摘要设置"><a href="#文章摘要设置" class="headerlink" title="文章摘要设置"></a>文章摘要设置</h2><p><a href="https://blog.csdn.net/lewky_liu/article/details/81277337" target="_blank" rel="noopener">站点首页不显示文章全文</a></p><p>修改配置文件_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Automatically Excerpt. Not recommend.</span></span><br><span class="line"><span class="comment"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><p><strong><em>注：</em></strong>使用<code>&lt;!-- more --&gt;</code>标志来精确控制文章的摘要预览，通常在文章开头写一下概要。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo的一些配置和命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="建站" scheme="https://JarvanKuo.github.io/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="hexo" scheme="https://JarvanKuo.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>atlas笔记</title>
    <link href="https://JarvanKuo.github.io/2019/09/17/atlas%E7%AC%94%E8%AE%B0/"/>
    <id>https://JarvanKuo.github.io/2019/09/17/atlas笔记/</id>
    <published>2019-09-17T05:50:09.000Z</published>
    <updated>2019-09-28T03:53:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>atlas：mysql-proxy扩展，mysql中间件，可以实现分表、分库（sharding版本）、读写分离、数据库连接池等功能！</p><a id="more"></a><p>Atlas类似于Twemproxy，是Qihoo 360基于Mysql Proxy开发的一个Mysql中间件，据称每天承载读写请求数达几十亿，可以实现分表、分库（sharding版本）、读写分离、数据库连接池等功能，缺点是没有实现跨库分表功能，需要在客户端使用分库逻辑，目前Atlas不活跃</p><p>参考文献：</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>win10 下 wsl 环境 ubuntu 的 atlas</p><h2 id="Mysql-Atlas配置"><a href="#Mysql-Atlas配置" class="headerlink" title="Mysql+Atlas配置"></a>Mysql+Atlas配置</h2><ol><li><p>ubuntu 下安装 Atlas</p><p>源码安装方式：请参考<a href="https://www.iteye.com/blog/jinnianshilongnian-2188113" target="_blank" rel="noopener">第六章 Web开发实战1——HTTP服务</a></p><p> 源码编译方法不行的话，直接下载DEB包后用dpkg -i安装即可，<em>注意：</em>旧版本才有<a href="https://github.com/Qihoo360/Atlas/releases/download/2.2/Atlas-2.2-debian7.0-x86_64.deb" target="_blank" rel="noopener">DEB包</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/Qihoo360/Atlas/releases/download/2.2/Atlas-2.2-debian7.0-x86_64.deb</span><br><span class="line">dpkg -i Atlas-2.2-debian7.0-x86_64.deb</span><br></pre></td></tr></table></figure></li><li><p>ubuntu 下启动 Atlas 缺失 libmysqlclient.so.18</p><p>参考：<a href="https://blog.csdn.net/ling811/article/details/75258553" target="_blank" rel="noopener">启动zabbix报缺少libmysqlclient.so.18</a>，请自行下载：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先查找一下</span></span><br><span class="line">whereis libmysqlclient.so.18</span><br><span class="line"><span class="comment"># 如果存在则软连接到库路径</span></span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/mysql/lib/libmysqlclient.so.18 /usr/lib64/libmysqlclient.so.18</span><br><span class="line"><span class="comment"># 没有则下载后链接</span></span><br><span class="line">wget -O /usr/lib/libmysqlclient.so.18 http://files.directadmin.com/services/es_7.0_64/libmysqlclient.so.18</span><br></pre></td></tr></table></figure></li><li><p>atlas配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/mysql-proxy/conf/chapter6.cnf</span><br></pre></td></tr></table></figure></li><li><p>Atlas启动/重启/停止</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chapter6 即上述的 chapter6.cnf</span></span><br><span class="line">/usr/<span class="built_in">local</span>/mysql-proxy/bin/mysql-proxyd chapter6 &#123; start | restart | stop &#125;</span><br></pre></td></tr></table></figure></li><li><p>atlas管理</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -h127.0.0.1 -P1113  -uadmin -p123456  </span><br><span class="line">SELECT * FROM <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br></pre></td></tr></table></figure></li><li><p>atlas 客户端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过代理端口进入客户端</span></span><br><span class="line">mysql -h127.0.0.1 -P1112  -uroot -p123456</span><br><span class="line">use chapter6;  </span><br><span class="line">insert into ad values(1 <span class="string">'测试1);      </span></span><br><span class="line"><span class="string">insert into ad values(2, '</span>测试2<span class="string">');      </span></span><br><span class="line"><span class="string">insert into ad values(3 '</span>测试3);      </span><br><span class="line">select * from ad <span class="built_in">where</span> sku_id=1;  </span><br><span class="line">select * from ad <span class="built_in">where</span> sku_id=2;  </span><br><span class="line"><span class="comment">#通过如下sql可以看到实际的分表结果  </span></span><br><span class="line">select * from ad_0;  </span><br><span class="line">select * from ad_1;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;atlas：mysql-proxy扩展，mysql中间件，可以实现分表、分库（sharding版本）、读写分离、数据库连接池等功能！&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://JarvanKuo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="atlas" scheme="https://JarvanKuo.github.io/tags/atlas/"/>
    
  </entry>
  
  <entry>
    <title>openresty安装笔记</title>
    <link href="https://JarvanKuo.github.io/2019/09/17/openresty%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/"/>
    <id>https://JarvanKuo.github.io/2019/09/17/openresty安装笔记/</id>
    <published>2019-09-17T05:50:09.000Z</published>
    <updated>2019-09-18T11:02:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>openresty安装在ubuntu下的安装</p><a id="more"></a><p>参考 <a href="https://www.iteye.com/blog/jinnianshilongnian-2186270" target="_blank" rel="noopener">安装OpenResty(Nginx+Lua)开发环境</a></p><h2 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录/usr/servers，以后我们把所有软件安装在此目录</span></span><br><span class="line">mkdir -p /usr/servers  </span><br><span class="line"><span class="built_in">cd</span> /usr/servers/  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">apt-get install libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl </span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载ngx_openresty-1.7.7.2.tar.gz并解压</span></span><br><span class="line">wget http://openresty.org/download/ngx_openresty-1.7.7.2.tar.gz  </span><br><span class="line">tar -xzvf ngx_openresty-1.7.7.2.tar.gz  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装LuaJIT</span></span><br><span class="line"><span class="built_in">cd</span> /usr/servers/ngx_openresty-1.7.7.2/bundle/LuaJIT-2.1-20150120/  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 没有安装make的需要先安装</span></span><br><span class="line">    apt install make</span><br><span class="line">    apt install make-guile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没安装gcc的需要先执行以下命令</span></span><br><span class="line">sudo apt-get  build-dep  gcc </span><br><span class="line"></span><br><span class="line">make clean &amp;&amp; make &amp;&amp; make install  </span><br><span class="line">ln -sf luajit-2.1.0-alpha /usr/<span class="built_in">local</span>/bin/luajit  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载ngx_cache_purge模块，该模块用于清理nginx缓存</span></span><br><span class="line"><span class="built_in">cd</span> /usr/servers/ngx_openresty-1.7.7.2/bundle  </span><br><span class="line">wget https://github.com/FRiCKLE/ngx_cache_purge/archive/2.3.tar.gz  </span><br><span class="line">tar -xvf 2.3.tar.gz  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载nginx_upstream_check_module模块，该模块用于ustream健康检查</span></span><br><span class="line"><span class="built_in">cd</span> /usr/servers/ngx_openresty-1.7.7.2/bundle  </span><br><span class="line">wget https://github.com/yaoweibin/nginx_upstream_check_module/archive/v0.3.0.tar.gz  </span><br><span class="line">tar -xvf v0.3.0.tar.gz   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ngx_openresty</span></span><br><span class="line"><span class="built_in">cd</span> /usr/servers/ngx_openresty-1.7.7.2  </span><br><span class="line">./configure --prefix=/usr/servers --with-http_realip_module  --with-pcre  --with-luajit --add-module=./bundle/ngx_cache_purge-2.3/ --add-module=./bundle/nginx_upstream_check_module-0.3.0/ -j2  </span><br><span class="line"><span class="comment"># 报错 checking for zlib library ... not found，需要安装 zlib</span></span><br><span class="line">sudo apt-get install zlib1g-dev</span><br><span class="line">make &amp;&amp; make install  </span><br><span class="line"><span class="comment"># 报错 recipe for target 'objs/src/event/ngx_event_openssl.o' failed，openssl版本问题，需要安装旧版本</span></span><br><span class="line"><span class="comment"># 需要指定旧版本，推荐在编译 Nginx 时指定 OpenSSL 源码目录，而不是使用系统自带的版本，这样更可控</span></span><br><span class="line"><span class="built_in">cd</span> /usr/servers/ngx_openresty-1.7.7.2/bundle </span><br><span class="line">wget -O openssl.tar.gz -c https://github.com/openssl/openssl/archive/OpenSSL_1_0_2k.tar.gz</span><br><span class="line">tar zxf openssl.tar.gz</span><br><span class="line">mv openssl-OpenSSL_1_0_2k/ openssl</span><br><span class="line"><span class="comment"># 重新配置 ngx_openresty</span></span><br><span class="line"><span class="built_in">cd</span> /usr/servers/ngx_openresty-1.7.7.2</span><br><span class="line">./configure \</span><br><span class="line">--prefix=/usr/servers \</span><br><span class="line">--with-http_realip_module  \</span><br><span class="line">--with-pcre  \</span><br><span class="line">--with-luajit \</span><br><span class="line">--add-module=./bundle/ngx_cache_purge-2.3/ \</span><br><span class="line">--add-module=./bundle/nginx_upstream_check_module-0.3.0/ \</span><br><span class="line">--with-openssl=./bundle/openssl \</span><br><span class="line">-j2  </span><br><span class="line"><span class="comment"># 重新make</span></span><br><span class="line">make &amp;&amp; make install  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx，访问 http://localhost/ 成功即可</span></span><br><span class="line">/usr/servers/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><p><em>拓展：</em></p><ol><li><a href="https://blog.csdn.net/qq_35865125/article/details/80519030" target="_blank" rel="noopener">ubuntu gcc 安装 使用</a></li><li><a href="https://blog.csdn.net/wsclinux/article/details/50494501" target="_blank" rel="noopener">ubantu下安装zlib的方法</a></li><li><a href="https://imququ.com/post/my-nginx-conf.html" target="_blank" rel="noopener">Nginx 配置之完整篇</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;openresty安装在ubuntu下的安装&lt;/p&gt;
    
    </summary>
    
    
      <category term="分布式" scheme="https://JarvanKuo.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="openresty" scheme="https://JarvanKuo.github.io/tags/openresty/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置</title>
    <link href="https://JarvanKuo.github.io/2019/09/17/nginx%E7%AC%94%E8%AE%B0/"/>
    <id>https://JarvanKuo.github.io/2019/09/17/nginx笔记/</id>
    <published>2019-09-17T05:50:09.000Z</published>
    <updated>2019-09-26T15:04:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>nginx的命令，配置！</p><a id="more"></a><h2 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h2><ol><li><p>测试配置文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx  -t</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>启动：</p><p> 指定配置文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>`/ -c conf/nginx.conf</span><br></pre></td></tr></table></figure></li><li><p>停止：</p><p> nginx指定配置文件的，停止时也需指定参数</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>`/ -c conf/nginx.conf -s quit</span><br></pre></td></tr></table></figure></li></ol><h2 id="nginx概念"><a href="#nginx概念" class="headerlink" title="nginx概念"></a>nginx概念</h2><ul><li><p>upstream 负载均衡概要</p><p>upstream 是 Nginx 的 HTTP Upstream 模块，这个模块通过一个简单的调度算法来实现客户<br>端 IP 到后端服务器的负载均衡</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test.net&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.10.13:80</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.10.14:80</span> down;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.10.15:8009</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">20s</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.10.16:8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://test.net;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx的命令，配置！&lt;/p&gt;
    
    </summary>
    
    
      <category term="分布式" scheme="https://JarvanKuo.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="nginx" scheme="https://JarvanKuo.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>wsl笔记</title>
    <link href="https://JarvanKuo.github.io/2019/09/17/wsl%E7%AC%94%E8%AE%B0/"/>
    <id>https://JarvanKuo.github.io/2019/09/17/wsl笔记/</id>
    <published>2019-09-17T05:50:09.000Z</published>
    <updated>2019-09-24T08:49:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>wsl 下的 ubuntu 系统一些问题总结！</p><a id="more"></a><p>参考文献：</p><p><a href="https://iyaozhen.com/windows10-wsl-ubuntu.html" target="_blank" rel="noopener">Windows 10生产力提升之WSL实践</a></p><p><a href="https://hbaaron.github.io/blog_2017/%E5%9C%A8wsl%E4%B8%8B%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8sshd%E5%85%A8%E6%94%BB%E7%95%A5/" target="_blank" rel="noopener">在wsl下安装使用sshd全攻略.md</a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>win10 下 wsl 环境安装 ubuntu</p><h2 id="修改更新源"><a href="#修改更新源" class="headerlink" title="修改更新源"></a>修改更新源</h2><ol><li><p>备份文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list  /etc/apt/sources.list.old</span><br></pre></td></tr></table></figure></li><li><p>使用阿里源</p><p> 打开文件：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> sudo vi /etc/apt/sources.list</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p> 整个文件替换成阿里源：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http:<span class="comment">//mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span></span><br><span class="line">deb-src http:<span class="comment">//mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span></span><br><span class="line">deb http:<span class="comment">//mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span></span><br><span class="line">deb-src http:<span class="comment">//mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span></span><br><span class="line">deb http:<span class="comment">//mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span></span><br><span class="line">deb-src http:<span class="comment">//mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span></span><br><span class="line">deb http:<span class="comment">//mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span></span><br><span class="line">deb-src http:<span class="comment">//mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span></span><br><span class="line">deb http:<span class="comment">//mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span></span><br><span class="line">deb-src http:<span class="comment">//mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure></li><li><p>更新</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></li></ol><h2 id="设置超级用户"><a href="#设置超级用户" class="headerlink" title="设置超级用户"></a>设置超级用户</h2><p>ubuntu的su初始密码设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd</span><br></pre></td></tr></table></figure><h2 id="zsh美化终端"><a href="#zsh美化终端" class="headerlink" title="zsh美化终端"></a>zsh美化终端</h2><p><a href="https://www.jianshu.com/p/723c2241e8e7" target="_blank" rel="noopener">安装使用oh-my-zsh（Win10+WSL或Ubuntu）</a></p><h3 id="设zsh为默认shell"><a href="#设zsh为默认shell" class="headerlink" title="设zsh为默认shell"></a>设zsh为默认shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh <span class="comment"># 设置 bash 同理</span></span><br></pre></td></tr></table></figure><h3 id="环境变量PATH"><a href="#环境变量PATH" class="headerlink" title="环境变量PATH"></a>环境变量PATH</h3><p>使用zsh后，环境变量需要在 ~/.zshrc 配置文件中定义，/etc/profile 是不会生效的</p><h2 id="开启-ssh-远程连接"><a href="#开启-ssh-远程连接" class="headerlink" title="开启 ssh 远程连接"></a>开启 ssh 远程连接</h2><p>wsl下的ubuntu自带ssh服务有问题需要卸载重装一遍ssh服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重装 openssh-server</span></span><br><span class="line">sudo apt-get remove openssh-server</span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 shd_config文件</span></span><br><span class="line">sudo vi /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># Port 22 #默认即可，如果有端口占用可以自己修改</span></span><br><span class="line"><span class="comment"># PasswordAuthentication yes # 允许用户名密码方式登录</span></span><br><span class="line"><span class="comment"># PermitRootLogin yes # 允许管理员ssh登录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启ssh服务</span></span><br><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><h2 id="apt命令与问题"><a href="#apt命令与问题" class="headerlink" title="apt命令与问题"></a>apt命令与问题</h2><p>[<a href="https://www.cnblogs.com/hk-faith/p/8776471.html" target="_blank" rel="noopener">Ubuntu的apt命令详解</a>]</p><ol><li>搜索软件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  apt-cache  search  package_name</span><br></pre></td></tr></table></figure><ol start="2"><li><p><a href="https://nowtime.cc/linux/683.html" target="_blank" rel="noopener">WSL Ubuntu 解决出现 E: Could not read response to hello message from hook …问题</a></p><p>执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /etc/apt/apt.conf.d/20snapd.conf</span><br></pre></td></tr></table></figure></li></ol><h2 id="windows-和-wsl-互相访问文件"><a href="#windows-和-wsl-互相访问文件" class="headerlink" title="windows 和 wsl 互相访问文件"></a>windows 和 wsl 互相访问文件</h2><ul><li><p>打开wsl文件</p><p>使用explorer.exe，wsl下切换用户就不能使用这个命令。。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explorer.exe .</span><br></pre></td></tr></table></figure></li><li><p>访问windows文件，使用挂载方式/mnt/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mnt/c/Users/Ben/Documents/</span><br></pre></td></tr></table></figure></li></ul><h2 id="wsl开机没有自启动ssh"><a href="#wsl开机没有自启动ssh" class="headerlink" title="wsl开机没有自启动ssh"></a>wsl开机没有自启动ssh</h2><p>需要在wsl中手动运行一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure><p>由于是wsl内部是类似docker运行的，没有 systemd 服务</p><h2 id="重装python"><a href="#重装python" class="headerlink" title="重装python"></a>重装python</h2><ol><li><p>检查python路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一：</span></span><br><span class="line"><span class="built_in">type</span> -a python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：</span></span><br><span class="line">ls -l /usr/bin/python</span><br><span class="line">ls -l /usr/bin/python*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式三：</span></span><br><span class="line"><span class="built_in">which</span> python</span><br></pre></td></tr></table></figure></li><li><p>安装python2、python3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装python2</span></span><br><span class="line">$ sudo apt-get install python</span><br><span class="line"><span class="comment"># 安装python3</span></span><br><span class="line">$ sudo apt-get install python3</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;wsl 下的 ubuntu 系统一些问题总结！&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://JarvanKuo.github.io/categories/linux/"/>
    
    
      <category term="ubuntu" scheme="https://JarvanKuo.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>openresty配置</title>
    <link href="https://JarvanKuo.github.io/2019/09/17/openresty%E9%85%8D%E7%BD%AE/"/>
    <id>https://JarvanKuo.github.io/2019/09/17/openresty配置/</id>
    <published>2019-09-17T05:50:09.000Z</published>
    <updated>2019-09-28T14:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>openresty配置的一些问题总结！</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p>win10下的linux子系统ubuntu（wsl）</p></li><li><p>openresty版本：ngx_openresty-1.7.7.2.tar.gz</p></li></ul><h2 id="wsl安装"><a href="#wsl安装" class="headerlink" title="wsl安装"></a>wsl安装</h2><p>请移步 <a href="/2019/09/17/wsl笔记/" title="wsl笔记">wsl笔记</a></p><h2 id="openresty安装"><a href="#openresty安装" class="headerlink" title="openresty安装"></a>openresty安装</h2><p>请参考<a href="https://www.iteye.com/blog/jinnianshilongnian-2186270" target="_blank" rel="noopener">安装OpenResty(Nginx+Lua)开发环境</a></p><p>或者参考  <a href="/2019/09/17/openresty安装笔记/" title="openresty安装笔记">openresty安装笔记</a></p><h3 id="openssl版本问题"><a href="#openssl版本问题" class="headerlink" title="openssl版本问题"></a>openssl版本问题</h3><p>需要指定旧版本，推荐在编译 Nginx 时指定 OpenSSL 源码目录，而不是使用系统自带的版本，这样更可控。</p><p>参考<a href="https://imququ.com/post/my-nginx-conf.html" target="_blank" rel="noopener">openssl版本问题</a></p><h3 id="Lua模块安装"><a href="#Lua模块安装" class="headerlink" title="Lua模块安装"></a>Lua模块安装</h3><ol><li><p>安装 LuaRocks </p><p> LuaRocks: Lua 的模块安装和部署工具</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install luarocks</span><br></pre></td></tr></table></figure></li><li><p>安装 luasocket</p><p> lua 远程调试引入的 <code>require(&quot;mobdebug&quot;).start()</code> 需要 socket </p><p> <em>注</em>：Lua 的 Remote Debug 远程调试 现在还搞不定，此处占个坑。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">luarocks install luasocket</span><br></pre></td></tr></table></figure></li></ol><h2 id="openresty使用"><a href="#openresty使用" class="headerlink" title="openresty使用"></a>openresty使用</h2><h3 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h3><ol><li><p>启动：</p><p> 指定配置文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>`/ -c conf/nginx.conf</span><br></pre></td></tr></table></figure></li><li><p>停止：</p><p> nginx指定配置文件的，停止时也需指定参数</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p `<span class="built_in">pwd</span>`/ -c conf/nginx.conf -s quit</span><br></pre></td></tr></table></figure></li></ol><h3 id="nginx-conf-配置"><a href="#nginx-conf-配置" class="headerlink" title="nginx.conf 配置"></a>nginx.conf 配置</h3><ul><li><p>正则匹配路径</p><table><thead><tr><th align="left">模式</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">location = /uri</td><td align="left">= 表示精确匹配，只有完全匹配上才能生效</td></tr><tr><td align="left">location ^~ /uri</td><td align="left">^~ 开头对URL路径进行前缀匹配，并且在正则之前。</td></tr><tr><td align="left">location ~ pattern</td><td align="left">开头表示区分大小写的正则匹配</td></tr><tr><td align="left">location ~* pattern</td><td align="left">开头表示不区分大小写的正则匹配</td></tr><tr><td align="left">location /uri</td><td align="left">不带任何修饰符，也表示前缀匹配，但是在正则匹配之后</td></tr><tr><td align="left">location /</td><td align="left">通用匹配，任何未匹配到其它location的请求都会匹配到，相当于switch中的default</td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ ^/api/([-_a-zA-Z0-9]+)</span> &#123;</span><br><span class="line">    <span class="comment"># 准入阶段完成参数验证</span></span><br><span class="line">    <span class="attribute">access_by_lua_file</span>  nginx_test_server/access_check.lua;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#内容生成阶段</span></span><br><span class="line">    <span class="attribute">content_by_lua_file</span> nginx_test_server/<span class="variable">$1</span>.lua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开发调试时取消缓存</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里设置为 off，是为了避免每次修改之后都要重新 reload 的麻烦。</span></span><br><span class="line"><span class="comment"># 在生产环境上务必确保 lua_code_cache 设置成 on。</span></span><br><span class="line"><span class="attribute">lua_code_cache</span> <span class="literal">off</span>;</span><br></pre></td></tr></table></figure></li><li><p>http 模块 报错 bad argument #2 to ‘set_keepalive’ (number expected, got nil)</p><p>  参考：<a href="https://blog.csdn.net/miachen520/article/details/91353525" target="_blank" rel="noopener">bad argument #2 to ‘set_keepalive’ (number expected, got nil)的解决办法</a></p><p>  在关联数组中多传一个参数keepalive=false 即</p>  <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">method = “GET”,</span><br><span class="line"><span class="built_in">path</span> = requestBody,</span><br><span class="line">keepalive=<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="lua-的一些坑"><a href="#lua-的一些坑" class="headerlink" title="lua 的一些坑"></a>lua 的一些坑</h2><ul><li><p>openresty/lua-resty-redis 的 批量查询 返回值问题</p><p>参考：<a href="https://blog.csdn.net/scdxmoe/article/details/52171720" target="_blank" rel="noopener">nil、null与ngx.null</a></p><p><a href="https://github.com/openresty/lua-resty-redis/blob/master/README.markdown" target="_blank" rel="noopener">官方说明</a></p><p>A non-nil Redis “bulk reply” results in a Lua string as the return value. A nil bulk reply results in a <code>ngx.null</code> return value.</p><p>A nil multi-bulk reply returns in a <code>ngx.null</code> value.</p><p>如果使用批量查询如mget，查不到数据会返回 ngx.null     </p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;openresty配置的一些问题总结！&lt;/p&gt;
    
    </summary>
    
    
      <category term="分布式" scheme="https://JarvanKuo.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="openresty" scheme="https://JarvanKuo.github.io/tags/openresty/"/>
    
  </entry>
  
  <entry>
    <title>SSDB数据库笔记</title>
    <link href="https://JarvanKuo.github.io/2019/09/17/SSDB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/"/>
    <id>https://JarvanKuo.github.io/2019/09/17/SSDB数据库笔记/</id>
    <published>2019-09-17T05:50:09.000Z</published>
    <updated>2019-09-28T07:31:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>SSDB：一个高性能的支持丰富数据结构的 NoSQL 数据库, 用于替代 Redis.</p><a id="more"></a><p>参考文献：</p><p><a href="http://ssdb.io/zh_cn/" target="_blank" rel="noopener">SSDB官网</a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>win10 下 wsl 环境 ubuntu 的 ssdb</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>配置文件使用Tab而不是空格做缩排（复制到配置文件后请把空格替换为Tab）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">work_dir = /usr/data/ssdb_8883  </span><br><span class="line">pidfile = /usr/data/ssdb_8883.pid  </span><br><span class="line">  </span><br><span class="line">server:  </span><br><span class="line">        ip: 0.0.0.0  </span><br><span class="line">        port: 8883  </span><br><span class="line">        allow: 127.0.0.1  </span><br><span class="line">        allow: 192.168  </span><br><span class="line">  </span><br><span class="line">replication:  </span><br><span class="line">        binlog: yes  </span><br><span class="line">        sync_speed: -1  </span><br><span class="line">        slaveof:  </span><br><span class="line">                type: sync  </span><br><span class="line">                ip: 127.0.0.1  </span><br><span class="line">                port: 8881  </span><br><span class="line">  </span><br><span class="line">logger:  </span><br><span class="line">        level: error  </span><br><span class="line">        output: /usr/data/ssdb_8883.log  </span><br><span class="line">        rotate:  </span><br><span class="line">                size: 1000000000  </span><br><span class="line">  </span><br><span class="line">leveldb:  </span><br><span class="line">        cache_size: 500  </span><br><span class="line">        block_size: 32  </span><br><span class="line">        write_buffer_size: 64  </span><br><span class="line">        compaction_speed: 1000  </span><br><span class="line">        compression: yes</span><br></pre></td></tr></table></figure><h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nohup /usr/servers/ssdb-1.8.2/ssdb-server  /usr/chapter7/ssdb_desc_8883.conf &amp;  </span><br><span class="line">ps -aux | grep ssdb <span class="comment"># 命令看是否启动了</span></span><br><span class="line">tail -f nohup.out <span class="comment"># 查看错误信息</span></span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>ssdb-server 是服务器的程序, ssdb-cli 是命令⾏的客户端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/ssdb-1.8.2/tools/ssdb-cli -p 8888  </span><br><span class="line"><span class="comment"># 因为SSDB支持Redis协议，所以用Redis客户端也可以访问</span></span><br><span class="line">/usr/servers/redis-2.8.19/src/redis-cli  -p 8888</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SSDB：一个高性能的支持丰富数据结构的 NoSQL 数据库, 用于替代 Redis.&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://JarvanKuo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SSDB" scheme="https://JarvanKuo.github.io/tags/SSDB/"/>
    
  </entry>
  
  <entry>
    <title>redis笔记</title>
    <link href="https://JarvanKuo.github.io/2019/09/17/redis%E7%AC%94%E8%AE%B0/"/>
    <id>https://JarvanKuo.github.io/2019/09/17/redis笔记/</id>
    <published>2019-09-17T05:50:09.000Z</published>
    <updated>2019-09-28T07:29:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>redis笔记！</p><a id="more"></a><p>参考文献：</p><p><a href="https://www.iteye.com/blog/jinnianshilongnian-2186787" target="_blank" rel="noopener">第三章 Redis/SSDB+Twemproxy安装与使用</a></p><p><a href="https://www.jianshu.com/p/fcc8894923f7" target="_blank" rel="noopener">nohup和&amp;使用</a></p><p><a href="https://www.iteye.com/blog/zjjndnr-2386573" target="_blank" rel="noopener">Twemproxy-缓存代理分片机制</a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>win10 下 wsl 环境 ubuntu 的 redis</p><h2 id="Redis安装与使用"><a href="#Redis安装与使用" class="headerlink" title="Redis安装与使用"></a>Redis安装与使用</h2><ol><li><p>下载redis并安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/servers/  </span><br><span class="line">wget https://github.com/antirez/redis/archive/2.8.19.tar.gz  </span><br><span class="line">tar -xvf 2.8.19.tar.gz  </span><br><span class="line"><span class="built_in">cd</span> redis-2.8.19/  </span><br><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>后台启动Redis服务器</p><p> 使用 nohup 和 &amp; 指令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup /usr/servers/redis-2.8.19/src/redis-server  /usr/servers/redis-2.8.19/redis.conf &amp;</span><br><span class="line">`</span><br></pre></td></tr></table></figure></li><li><p>查看是否启动成功</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>进入客户端并测试</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/redis-2.8.19/src/redis-cli  -p 6379  </span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> i 1  </span><br><span class="line">OK  </span><br><span class="line">127.0.0.1:6379&gt; get i  </span><br><span class="line"><span class="string">"1"</span> </span><br><span class="line">127.0.0.1:6379&gt; quit  <span class="comment"># quit 退出 redis 客户端</span></span><br></pre></td></tr></table></figure></li><li><p>redis客户端显示中文</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli  -- raw  <span class="comment"># 默认redis不转义中文的，需要加上 --raw</span></span><br></pre></td></tr></table></figure></li><li><p>redis-cli查看所有的keys及清空所有的数据</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keys * <span class="comment"># 查看所有keys</span></span><br><span class="line">flushall  <span class="comment"># 清空所有数据</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Redis主从"><a href="#Redis主从" class="headerlink" title="Redis主从"></a>Redis主从</h2><ol><li><p>基本设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#端口设置，默认6379  </span><br><span class="line">port 6379  </span><br><span class="line">#日志文件，默认/dev/null  </span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"></span><br><span class="line">#内存大小对应关系  </span><br><span class="line"># 1k =&gt; 1000 bytes  </span><br><span class="line"># 1kb =&gt; 1024 bytes  </span><br><span class="line"># 1m =&gt; 1000000 bytes  </span><br><span class="line"># 1mb =&gt; 1024*1024 bytes  </span><br><span class="line"># 1g =&gt; 1000000000 bytes  </span><br><span class="line"># 1gb =&gt; 1024*1024*1024 bytes  </span><br><span class="line"></span><br><span class="line">#设置Redis占用100mb的大小  </span><br><span class="line">maxmemory  100mb  </span><br><span class="line"></span><br><span class="line">#如果内存满了就需要按照如相应算法进行删除过期的/最老的  </span><br><span class="line">#volatile-lru 根据LRU算法移除设置了过期的key  </span><br><span class="line">#allkeys-lru  根据LRU算法移除任何key(包含那些未设置过期时间的key)  </span><br><span class="line">#volatile-random/allkeys-&gt;random 使用随机算法而不是LRU进行删除  </span><br><span class="line">#volatile-ttl 根据Time-To-Live移除即将过期的key   </span><br><span class="line">#noeviction   永不过期，而是报错  </span><br><span class="line">maxmemory-policy volatile-lru  </span><br><span class="line"></span><br><span class="line">#Redis并不是真正的LRU/TTL，而是基于采样进行移除的，即如采样10个数据移除其中最老的/即将过期的  </span><br><span class="line">maxmemory-samples 10</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>Redis主从</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#在配置文件中挂载主从，不推荐这种方式，我们实际应用时Redis可能是会宕机的  </span><br><span class="line">slaveof masterIP masterPort  </span><br><span class="line">#从是否只读，默认yes  </span><br><span class="line">slave-read-only yes  </span><br><span class="line">#当从失去与主的连接或者复制正在进行时，从是响应客户端（可能返回过期的数据）还是返回“SYNC with master in progress”错误，默认yes响应客户端  </span><br><span class="line">slave-serve-stale-data yes  </span><br><span class="line">#从库按照默认10s的周期向主库发送PING测试连通性  </span><br><span class="line">repl-ping-slave-period 10  </span><br><span class="line">#设置复制超时时间（SYNC期间批量I/O传输、PING的超时时间），确保此值大于repl-ping-slave-period  </span><br><span class="line">#repl-timeout 60  </span><br><span class="line">#当从断开与主的连接时的复制缓存区，仅当第一个从断开时创建一个，缓存区越大从断开的时间可以持续越长  </span><br><span class="line"># repl-backlog-size 1mb  </span><br><span class="line">#当从与主断开持续多久时清空复制缓存区，此时从就需要全量复制了，如果设置为0将永不清空    </span><br><span class="line"># repl-backlog-ttl 3600  </span><br><span class="line">#slave客户端缓存区，如果缓存区超过256mb将直接断开与从的连接，如果持续60秒超过64mb也会断开与从的连接  </span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br></pre></td></tr></table></figure><p>设置主从</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/servers/redis-2.8.19  </span><br><span class="line">cp redis.conf redis_6660.conf  </span><br><span class="line">cp redis.conf redis_6661.conf  </span><br><span class="line"><span class="comment"># 将端口分别改为port 6660和port 6661</span></span><br><span class="line">vim redis_6660.conf  </span><br><span class="line">vim redis_6661.conf  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">nohup /usr/servers/redis-2.8.19/src/redis-server  /usr/servers/redis-2.8.19/redis_6660.conf &amp;  </span><br><span class="line">nohup /usr/servers/redis-2.8.19/src/redis-server  /usr/servers/redis-2.8.19/redis_6661.conf &amp; </span><br><span class="line"><span class="comment"># 查看是否启动成功</span></span><br><span class="line">ps -aux | grep redis  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入从客户端，挂主（不在配置文件设置 slaveof masterIP masterPort ）</span></span><br><span class="line">/usr/servers/redis-2.8.19/src/redis-cli  -p 6661  </span><br><span class="line">127.0.0.1:6661&gt; slaveof 127.0.0.1 6660  </span><br><span class="line">OK  </span><br><span class="line">127.0.0.1:6661&gt; info replication  </span><br><span class="line"><span class="comment"># Replication  </span></span><br><span class="line">role:slave </span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>Redis持久化</p><p>为了防止数据丢失，可以挂载一个从（叶子节点）只进行持久化存储工作。</p><p>Redis持久化有RDB快照模式和AOF追加模式。</p></li><li><p>Redis动态调整配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6660&gt; config get maxmemory  </span><br><span class="line">1) <span class="string">"maxmemory"</span>  </span><br><span class="line">2) <span class="string">"10485760"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整配置值</span></span><br><span class="line">127.0.0.1:6660&gt; config <span class="built_in">set</span> maxmemory 20971520  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述命令重启redis后该配置会丢失，可以执行如下命令重写配置文件</span></span><br><span class="line">127.0.0.1:6660&gt; config rewrite</span><br></pre></td></tr></table></figure></li></ol><h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><p>一旦涉及到一台物理机无法存储的情况就需要考虑使用分片机制将数据存储到多台服务器，可以说是Redis集群。</p><p>利用 Twemproxy 实现分片、减少连接数、Hash Tag 分片逻辑。</p><h3 id="Twemproxy-代理"><a href="#Twemproxy-代理" class="headerlink" title="Twemproxy 代理"></a>Twemproxy 代理</h3><ol><li><p>Twemproxy 配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">vim /usr/servers/twemproxy-0.4.0/conf/nutcracker.yml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server1:</span></span><br><span class="line"><span class="attr">  listen:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:1111</span>  <span class="comment">## 监听地址和端口</span></span><br><span class="line"><span class="attr">  hash:</span> <span class="string">fnv1a_64</span>  <span class="comment">## 散列算法</span></span><br><span class="line"><span class="attr">  distribution:</span> <span class="string">ketama</span>  <span class="comment">## 分片的算法，有ketama（一致性hash）、module（取模）、random（随机）三种算法</span></span><br><span class="line"><span class="comment">#  auto_eject_hosts: true  ## 是否在节点无法响应时自动从服务器列表中剔除，重新响应时自动加入服务器列表中</span></span><br><span class="line"><span class="comment">#  timeout: 1000</span></span><br><span class="line"><span class="attr">  hash_tag:</span> <span class="string">"::"</span></span><br><span class="line"><span class="attr">  redis:</span> <span class="literal">true</span>  <span class="comment">## 后端代理的是否为redis</span></span><br><span class="line"><span class="attr">  servers:</span></span><br><span class="line"><span class="bullet">   -</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:6660:1</span> <span class="string">server1</span></span><br><span class="line"><span class="bullet">   -</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:6661:1</span> <span class="string">server2</span></span><br></pre></td></tr></table></figure></li><li><p>Twemproxy 启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/twemproxy-0.4.0/src/nutcracker  -d -c /usr/servers/twemproxy-0.4.0/conf/nutcracker.yml</span><br><span class="line">ps -aux | grep nutcracker</span><br><span class="line"><span class="comment"># 启动 Redis 客户端对应端口，查看是否代理成功</span></span><br><span class="line">/usr/servers/redis-2.8.19/src/redis-cli  -p 1111</span><br></pre></td></tr></table></figure><p>或者配置启动/重启/停止脚本方便操作 </p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/servers/twemproxy-0.4.0/scripts/nutcracker.init   </span><br><span class="line">vim /usr/servers/twemproxy-0.4.0/scripts/nutcracker.init</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>将OPTIONS改为 OPTIONS=”-d -c /usr/local/twemproxy/conf/nutcracker.yml”</p></li><li><p>注释掉. /etc/rc.d/init.d/functions；</p></li><li><p>将daemon –user ${USER} ${prog} $OPTIONS改为${prog} $OPTIONS；</p><p>[报错]：若nutcracker没设置为全局变量，则会报此错</p><p> nutcracker: command not found</p><p>写了全路径：/usr/servers/twemproxy-0.4.0/src/${prog} $OPTIONS</p></li><li><p>将killproc改为killall。</p><p>这样就可以使用如下脚本进行启动、重启、停止了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nutcracker.init &#123;start|stop|status|restart|reload|condrestart&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redis笔记！&lt;/p&gt;
    
    </summary>
    
    
      <category term="redis" scheme="https://JarvanKuo.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://JarvanKuo.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>markdown笔记</title>
    <link href="https://JarvanKuo.github.io/2019/09/17/markdown%E7%AC%94%E8%AE%B0/"/>
    <id>https://JarvanKuo.github.io/2019/09/17/markdown笔记/</id>
    <published>2019-09-17T05:50:09.000Z</published>
    <updated>2019-09-21T07:30:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>markdown总结！</p><a id="more"></a><p>参考文献：</p><p><a href="https://www.jianshu.com/p/b0f56b7d7ee8" target="_blank" rel="noopener">Markdown创建表格</a></p><h2 id="markdown创建表格"><a href="#markdown创建表格" class="headerlink" title="markdown创建表格"></a>markdown创建表格</h2><ul><li>极简方式</li></ul><table><thead><tr><th>name</th><th>价格</th><th>数量</th></tr></thead><tbody><tr><td>香蕉</td><td>$1</td><td>5</td></tr><tr><td>苹果</td><td>$1</td><td>6</td></tr><tr><td>草莓</td><td>$1</td><td>7</td></tr></tbody></table><ul><li>格式化</li></ul><table><thead><tr><th align="center">name</th><th align="center">111</th><th align="center">222</th><th align="center">333</th><th align="center">444</th></tr></thead><tbody><tr><td align="center">aaa</td><td align="center">bbb</td><td align="center">ccc</td><td align="center">ddd</td><td align="center">eee</td></tr><tr><td align="center">fff</td><td align="center">ggg</td><td align="center">hhh</td><td align="center">iii</td><td align="center">000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;markdown总结！&lt;/p&gt;
    
    </summary>
    
    
      <category term="编辑器" scheme="https://JarvanKuo.github.io/categories/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="markdown" scheme="https://JarvanKuo.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记</title>
    <link href="https://JarvanKuo.github.io/2019/09/17/linux%E7%AC%94%E8%AE%B0/"/>
    <id>https://JarvanKuo.github.io/2019/09/17/linux笔记/</id>
    <published>2019-09-17T05:50:09.000Z</published>
    <updated>2019-09-26T13:51:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>linux相关命令、配置。</p><a id="more"></a><p>参考文献：</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li><p><a href="https://blog.csdn.net/weixin_42425141/article/details/80940069" target="_blank" rel="noopener">字符编码转换 iconv命令</a></p><p><strong>iconv命令</strong>是用来转换文件的编码方式的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">iconv -f encoding [-t encoding] [inputfile]... </span><br><span class="line"><span class="comment"># 选项</span></span><br><span class="line">-f encoding :把字符从encoding编码开始转换。 </span><br><span class="line">-t encoding :把字符转换到encoding编码。 </span><br><span class="line">-l :列出已知的编码字符集合 </span><br><span class="line">-o file :指定输出文件 </span><br><span class="line">-c :忽略输出的非法字符 </span><br><span class="line">-s :禁止警告信息，但不是错误信息 </span><br><span class="line">--verbose :显示进度信息 </span><br><span class="line">-f和-t所能指定的合法字符在-l选项的命令里面都列出来了。 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前支持的字符编码： </span></span><br><span class="line">iconv -l </span><br><span class="line"><span class="comment"># 将文件file1转码，转后文件输出到fil2中： </span></span><br><span class="line">iconv file1 -f EUC-JP-MS -t UTF-8 -o file2</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux相关命令、配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://JarvanKuo.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://JarvanKuo.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ant笔记</title>
    <link href="https://JarvanKuo.github.io/2018/09/17/ant%E7%AC%94%E8%AE%B0/"/>
    <id>https://JarvanKuo.github.io/2018/09/17/ant笔记/</id>
    <published>2018-09-17T05:50:09.000Z</published>
    <updated>2019-09-19T07:59:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>ant的使用，命令！</p><a id="more"></a><p>参考文献：</p><p><a href="https://www.jianshu.com/p/cd47031d5771" target="_blank" rel="noopener">ant+maven一键打包springboot上传服务器发布</a></p><p><a href="https://blog.csdn.net/felix_cb/article/details/90643073" target="_blank" rel="noopener">判断linux文件、文件夹是否存在</a></p><p><a href="https://blog.csdn.net/sinat_36521655/article/details/79296181" target="_blank" rel="noopener">shell中脚本参数传递的两种方式</a></p><p><a href="http://smilejay.com/2011/08/unexpected-end-of-file/" target="_blank" rel="noopener">shell脚本“syntax error:unexpected end of file”解决方案</a></p><h2 id="ant远程部署"><a href="#ant远程部署" class="headerlink" title="ant远程部署"></a>ant远程部署</h2><ol><li><p>Ant 引用配置文件</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- set global properties for this build --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">file</span>=<span class="string">"build.properties"</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--输出配置信息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"show_property"</span> <span class="attr">description</span>=<span class="string">"show build.properties conf"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">echo</span>&gt;</span> ================== build.properties ================ <span class="tag">&lt;/<span class="name">echo</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">echo</span>&gt;</span>PROJECT_NAME=$&#123;ant.project.name&#125;<span class="tag">&lt;/<span class="name">echo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">echo</span>&gt;</span>DEST_DIR=$&#123;DEST_DIR&#125;<span class="tag">&lt;/<span class="name">echo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>target条件控制</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"detect.file"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">condition</span> <span class="attr">property</span>=<span class="string">"fileIsExists"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">and</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">available</span> <span class="attr">file</span>=<span class="string">"c:/123.txt"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">and</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">condition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"echoDemo"</span> <span class="attr">if</span>=<span class="string">"fileIsExists"</span> <span class="attr">depends</span>=<span class="string">"detect.file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">echo</span> <span class="attr">message</span>=<span class="string">"hello ant"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>Ant-sshexec-执行远程服务器或本地脚本</p><p> 需要先下载第三方依赖包jsch-0.1.46.jar到ant/lib目录</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sshexec</span> </span></span><br><span class="line"><span class="tag"><span class="attr">host</span>=<span class="string">"$&#123;host&#125;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">username</span>=<span class="string">"$&#123;usr&#125;"</span>   </span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">"$&#123;pwd&#125;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">trust</span>=<span class="string">"true"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">command</span>=<span class="string">"pwd;./test.sh"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">outputproperty</span>=<span class="string">"output"</span> # <span class="attr">sh</span> 的输出，可用 $&#123;<span class="attr">output</span>&#125; 获取</span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>scp命令上传文件</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scp</span> <span class="attr">todir</span>=<span class="string">"$&#123;USERNAME&#125;:$&#123;PASSWORD&#125;@$&#123;SERVER&#125;:$&#123;DEST_DIR&#125;"</span> <span class="attr">trust</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$&#123;LOCAL_PATH&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">name</span>=<span class="string">"build.properties"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">name</span>=<span class="string">"build.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">name</span>=<span class="string">".idea/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scp</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>判断远程文件是否存在</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#判断文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">"/data/filename"</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"文件存在"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"文件不存在"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>shell脚本传参</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"脚本<span class="variable">$0</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第一个参数<span class="variable">$1</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第二个参数<span class="variable">$2</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令行输入</span></span><br><span class="line">$ ./test.sh 1 2</span><br><span class="line"><span class="comment">#shell中将会输出：</span></span><br><span class="line">脚本./test.sh <span class="comment"># $0获取到的是脚本路径以及脚本名</span></span><br><span class="line"><span class="comment"># 后面按顺序获取参数，当参数超过10个时(包括10个)，需要使用$&#123;10&#125;,$&#123;11&#125;....才能获取到参数</span></span><br><span class="line">第一个参数1</span><br><span class="line">第二个参数2</span><br></pre></td></tr></table></figure></li><li><p>shell脚本添加执行权限</p><p> chmod是权限管理命令change the permissions mode of a file的缩写。。</p><p> u代表所有者，x代表执行权限。 + 表示增加权限。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">chmod u+x file.sh <span class="comment"># 就表示对当前目录下的file.sh文件的所有者增加可执行权限。</span></span><br></pre></td></tr></table></figure></li><li><p>shell脚本“syntax error:unexpected end of file”解决方案</p><p> 原因：该脚本在windows下编辑或者在windows打开保存过。</p><p> DOS下文件和Linux下文件格式差异问题导致的。</p><p> 在 idea 中右下角可以选择 LF 为换行标识。</p><p> 在 服务器可以使用vi修改文件格式，如下：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi dos.txt</span><br><span class="line">:<span class="built_in">set</span> fileformat=unix</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ant的使用，命令！&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://JarvanKuo.github.io/categories/linux/"/>
    
    
      <category term="ant" scheme="https://JarvanKuo.github.io/tags/ant/"/>
    
  </entry>
  
</feed>
